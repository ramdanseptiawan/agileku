"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[465],{9465:(e,t,a)=>{a.d(t,{A:()=>n,AuthProvider:()=>d});var r=a(95155),s=a(12115),o=a(39360);let c=(0,s.createContext)(),n=()=>{let e=(0,s.useContext)(c);if(!e)throw Error("useAuth must be used within an AuthProvider");return e},i=e=>(console.error("API Error:",e),{success:!1,error:e.message||"Terjadi kesalahan pada server"}),d=e=>{let{children:t}=e,[n,d]=(0,s.useState)(null),[l,u]=(0,s.useState)(!0),[y,g]=(0,s.useState)([]),[m,p]=(0,s.useState)([]),h=(0,s.useCallback)(async()=>{try{let e=await o.GS.getAllCourses();console.log("Courses data received:",e),g(e.data||e.courses||[])}catch(e){console.error("Failed to refresh courses:",e)}},[]),w=(0,s.useCallback)(async e=>{try{let t=await o.GS.getCourseById(e);if(t&&t.success&&t.data)return t.data;if(t&&t.course)return t.course;if(t&&(t.id||t.title))return t;return console.warn("Unexpected course response format:",t),null}catch(e){return console.error("Failed to get course by ID:",e),null}},[]);(0,s.useEffect)(()=>{(async()=>{try{if(o.apiUtils.isAuthenticated())try{let e=await o.R2.getProfile(),t=e.data||e.user||e;d(t),await h();let a=await (0,o.dg)(),r=[];a&&a.data&&Array.isArray(a.data)?r=a.data:a&&Array.isArray(a)&&(r=a),p(r)}catch(e){console.error("Failed to load user profile:",e),o.apiUtils.clearAuthData(),d(null),p([])}else d(null),p([]);await h()}catch(e){console.error("Failed to initialize app:",e)}finally{u(!1)}})()},[h]);let f=async(e,t)=>{try{let a=await o.R2.login(e,t);if(a&&a.success&&a.data&&a.data.user&&a.data.token){d(a.data.user),localStorage.setItem("currentUser",JSON.stringify(a.data.user));try{let e=await (0,o.dg)(),t=[];e&&e.data&&Array.isArray(e.data)?t=e.data:e&&Array.isArray(e)&&(t=e),p(t)}catch(e){console.error("Failed to load enrollments:",e),p([])}return{success:!0,user:a.data.user}}return{success:!1,error:"Login gagal"}}catch(e){return i(e)}},S=async e=>{if(!n)return{success:!1,error:"User not logged in"};if(P(e))return{success:!0,message:"Already enrolled"};try{let t=await o.GS.enrollInCourse(e),a=await (0,o.dg)(),r=[];return a&&a.data&&Array.isArray(a.data)?r=a.data:a&&Array.isArray(a)&&(r=a),p(r),{success:!0,data:t}}catch(e){if(console.error("Enrollment error:",e),e.message&&e.message.includes("Already enrolled")){let e=await (0,o.dg)(),t=[];return e&&e.data&&Array.isArray(e.data)?t=e.data:e&&Array.isArray(e)&&(t=e),p(t),{success:!0,message:"Already enrolled"}}return{success:!1,error:e.message}}},A=async e=>{try{let t=await o.GS.searchCourses(e);return t.data||t.courses||[]}catch(t){return console.error("Failed to search courses:",t),y.filter(t=>t.title.toLowerCase().includes(e.toLowerCase())||t.description.toLowerCase().includes(e.toLowerCase()))}},P=e=>!!Array.isArray(m)&&m.some(t=>t.id===parseInt(e)||t.course_id===parseInt(e)),b=async e=>{if(!Array.isArray(m))return 0;let t=m.find(t=>t.id===parseInt(e)||t.course_id===parseInt(e));if(!t)return 0;try{let t=await (0,o.Hb)(e);if(t&&t.data)return t.data.overallProgress||0}catch(e){console.warn("Failed to get real-time progress, using cached:",e)}return t.progress||0},k=(0,s.useCallback)(async()=>{if(n)try{let e=await (0,o.dg)(),t=[];e&&e.data&&Array.isArray(e.data)?t=e.data:e&&Array.isArray(e)&&(t=e),p(t)}catch(e){console.error("Failed to refresh user progress:",e)}},[n]),T=async e=>{try{if(n&&"admin"===n.role){let{adminAPI:t}=await Promise.resolve().then(a.bind(a,39360)),r=await t.getCoursePreTestAdmin(e);return r.data||r}{P(e)||(console.log("User not enrolled in course, attempting auto-enrollment..."),await S(e));let t=await o.GS.getCoursePreTest(e);return t.quiz||t}}catch(t){if(console.error("Failed to get pre-test:",t),n&&"admin"!==n.role)try{let{adminAPI:t}=await Promise.resolve().then(a.bind(a,39360)),r=await t.getCoursePreTestAdmin(e);return r.data||r}catch(e){console.error("Admin fallback also failed:",e)}return null}},C=async e=>{try{if(n&&"admin"===n.role){let{adminAPI:t}=await Promise.resolve().then(a.bind(a,39360)),r=await t.getCoursePostTestAdmin(e);return r.data||r}{P(e)||(console.log("User not enrolled in course, attempting auto-enrollment..."),await S(e));let t=await o.GS.getCoursePostTest(e);return t.quiz||t}}catch(t){if(console.error("Failed to get post-test:",t),n&&"admin"!==n.role)try{let{adminAPI:t}=await Promise.resolve().then(a.bind(a,39360)),r=await t.getCoursePostTestAdmin(e);return r.data||r}catch(e){console.error("Admin fallback also failed:",e)}return null}},O=async(e,t)=>{try{if(g(a=>a.map(a=>a.id===e?{...a,...t}:a)),n&&"admin"===n.role){let{adminAPI:r}=await Promise.resolve().then(a.bind(a,39360));await r.updateCourse(e,t)}return{success:!0}}catch(e){return console.error("Failed to update course:",e),await h(),{success:!1,error:e.message}}},E=async e=>{try{if(!n||"admin"!==n.role)throw Error("Only admin can access stage locks");let t=localStorage.getItem("authToken");if(!t)throw Error("No authentication token found");let a=await fetch("".concat("https://8080-firebase-agileku-1751862903205.cluster-ejd22kqny5htuv5dfowoyipt52.cloudworkstations.dev","/api/protected/admin/courses/").concat(e,"/stage-locks"),{method:"GET",headers:{Authorization:"Bearer ".concat(t),"Content-Type":"application/json"}});if(!a.ok)throw Error("HTTP ".concat(a.status,": ").concat(a.statusText));let r=a.headers.get("content-type");if(!r||!r.includes("application/json")){let e=await a.text();throw console.error("Non-JSON response:",e),Error("Server returned non-JSON response")}let s=await a.json();if(s.success)return{success:!0,data:s.data};throw Error(s.message||"Failed to fetch stage locks")}catch(e){return console.error("Error fetching stage locks:",e),{success:!1,error:e.message}}},v=async function(e,t,a){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"";try{if(!n||"admin"!==n.role)throw Error("Only admin can update stage locks");let s=localStorage.getItem("authToken");if(!s)throw Error("No authentication token found");let o={courseId:parseInt(e),stageName:t,isLocked:a,lockMessage:r},c=await fetch("".concat("https://8080-firebase-agileku-1751862903205.cluster-ejd22kqny5htuv5dfowoyipt52.cloudworkstations.dev","/api/protected/admin/courses/").concat(e,"/stage-locks"),{method:"PUT",headers:{Authorization:"Bearer ".concat(s),"Content-Type":"application/json"},body:JSON.stringify(o)});if(!c.ok)throw Error("HTTP ".concat(c.status,": ").concat(c.statusText));let i=c.headers.get("content-type");if(!i||!i.includes("application/json")){let e=await c.text();throw console.error("Non-JSON response:",e),Error("Server returned non-JSON response")}let d=await c.json();if(d.success)return{success:!0,data:d.data};throw Error(d.message||"Failed to update stage lock")}catch(e){return console.error("Error updating stage lock:",e),{success:!1,error:e.message}}};return(0,r.jsx)(c.Provider,{value:{currentUser:n,login:f,logout:()=>{o.R2.logout(),d(null),p([]),localStorage.removeItem("currentUser")},isLoading:l,courses:y,enrollments:m,refreshCourses:h,getCourseById:w,enrollInCourse:S,searchCourses:A,isEnrolledInCourse:P,getUserProgress:b,getUserProgressSync:e=>{if(!Array.isArray(m))return 0;let t=m.find(t=>t.id===parseInt(e)||t.course_id===parseInt(e));return t&&t.progress||0},refreshUserProgress:k,getCoursePreTest:T,getCoursePostTest:C,updateCourse:O,getStageLocks:E,updateStageLock:v},children:t})}},39360:(e,t,a)=>{a.d(t,{Ay:()=>A,GS:()=>n,Hb:()=>h,Qh:()=>g,R2:()=>o,UV:()=>f,adminAPI:()=>u,apiUtils:()=>d,certificateAPI:()=>l,dg:()=>w,hJ:()=>c,quizAPI:()=>i,rT:()=>p,requestCertificate:()=>S}),window.location.hostname;let r="".concat("https://api.mindshiftlearning.id","/api"),s=async function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};try{let a=localStorage.getItem("authToken"),s={mode:"cors",credentials:"include",headers:{"Content-Type":"application/json",...a&&{Authorization:"Bearer ".concat(a)},...t.headers},...t};console.log("Making API request to:","".concat(r).concat(e)),console.log("Request config:",s);let o=await fetch("".concat(r).concat(e),s);if(console.log("Response status:",o.status),console.log("Response ok:",o.ok),!o.ok){let e=await o.json().catch(()=>({}));throw console.error("Error response data:",e),Error(e.error||"HTTP error! status: ".concat(o.status))}let c=await o.json();return console.log("Response data:",c),c}catch(e){if(console.error("API Request Error:",e),console.error("Error details:",{message:e.message,name:e.name,stack:e.stack}),"TypeError"===e.name&&e.message.includes("Failed to fetch"))throw Error("Network error: Unable to connect to server. Please check if the backend is running.");throw e}},o={login:async(e,t)=>{let a=await s("/public/login",{method:"POST",body:JSON.stringify({username:e,password:t})});return a.success&&a.data&&a.data.token&&localStorage.setItem("authToken",a.data.token),a},register:async e=>await s("/public/register",{method:"POST",body:JSON.stringify(e)}),getProfile:async()=>await s("/protected/user/profile"),updateProfile:async e=>await s("/protected/user/profile",{method:"PUT",body:JSON.stringify(e)}),logout:()=>{localStorage.removeItem("authToken")}},c={uploadFile:async e=>{let t=new FormData;t.append("file",e);let a=localStorage.getItem("authToken"),s=await fetch("".concat(r,"/protected/uploads/file"),{method:"POST",mode:"cors",credentials:"include",headers:{Authorization:"Bearer ".concat(a)},body:t});if(!s.ok){let e=await s.text();throw Error("Upload failed: ".concat(e))}return await s.json()},getFile:async e=>await s("/protected/uploads/file/".concat(e)),createPostWorkSubmission:async e=>await s("/protected/submissions/postwork",{method:"POST",body:JSON.stringify(e)}),getPostWorkSubmissions:async function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return await s(e?"/protected/submissions/postwork?courseId=".concat(e):"/protected/submissions/postwork")},createFinalProjectSubmission:async e=>await s("/protected/submissions/finalproject",{method:"POST",body:JSON.stringify(e)}),getFinalProjectSubmission:async e=>await s("/protected/submissions/finalproject/".concat(e))},n={getAllCourses:async()=>await s("/public/courses"),getCourseById:async e=>await s("/public/courses/".concat(e)),searchCourses:async e=>await s("/public/courses/search?q=".concat(encodeURIComponent(e))),getCoursesWithEnrollment:async()=>await s("/protected/courses"),enrollInCourse:async e=>{try{return await s("/protected/courses/enroll",{method:"POST",body:JSON.stringify({courseId:parseInt(e)})})}catch(e){if(e.message&&e.message.includes("Already enrolled"))return{success:!0,message:"Already enrolled"};throw e}},getUserEnrollments:async()=>await s("/protected/courses/enrollments"),getCoursePreTest:async e=>await s("/protected/courses/".concat(e,"/pretest")),getCoursePostTest:async e=>await s("/protected/courses/".concat(e,"/posttest")),checkStageAccess:async(e,t)=>await s("/protected/courses/".concat(e,"/stages/").concat(t,"/access"))},i={getQuiz:async e=>await s("/protected/quizzes/".concat(e)),getQuizzesByCourse:async e=>await s("/protected/courses/".concat(e,"/quizzes")),startQuizAttempt:async e=>await s("/protected/quizzes/".concat(e,"/start"),{method:"POST"}),submitQuiz:async e=>await s("/protected/quizzes/submit",{method:"POST",body:JSON.stringify(e)}),getQuizAttempts:async e=>await s("/protected/quizzes/".concat(e,"/attempts"))},d={isAuthenticated:()=>!!localStorage.getItem("authToken"),getToken:()=>localStorage.getItem("authToken"),clearAuthData:()=>{localStorage.removeItem("authToken"),localStorage.removeItem("currentUser")},testConnection:async()=>{try{return(await fetch("".concat(r,"/health"))).ok}catch(e){return console.error("Backend connectivity test failed:",e),!1}}},l={requestCertificate:async e=>await s("/protected/courses/".concat(e,"/certificate"),{method:"POST"}),getUserCertificates:async()=>await s("/protected/user/certificates"),verifyCertificate:async e=>await s("/public/certificates/verify/".concat(e))},u={getAllCourses:async()=>await s("/protected/admin/courses"),createCourse:async e=>await s("/protected/admin/courses",{method:"POST",body:JSON.stringify(e)}),updateCourse:async(e,t)=>await s("/protected/admin/courses/".concat(e),{method:"PUT",body:JSON.stringify(t)}),deleteCourse:async e=>await s("/protected/admin/courses/".concat(e),{method:"DELETE"}),createGrade:async e=>await s("/protected/admin/grading",{method:"POST",body:JSON.stringify(e)}),getGrades:async()=>await s("/protected/admin/grading"),getCourseSubmissions:async e=>await s("/protected/admin/courses/".concat(e,"/submissions")),getAllCertificates:async()=>await s("/protected/admin/certificates"),getPendingCertificates:async()=>await s("/protected/admin/certificates/pending"),approveCertificate:async e=>await s("/protected/admin/certificates/".concat(e,"/approve"),{method:"POST"}),rejectCertificate:async(e,t)=>await s("/protected/admin/certificates/".concat(e,"/reject"),{method:"POST",body:JSON.stringify({reason:t})}),getAllUsers:async()=>await s("/protected/admin/users"),createUser:async e=>await s("/protected/admin/users",{method:"POST",body:JSON.stringify(e)}),updateUser:async(e,t)=>await s("/protected/admin/users/".concat(e),{method:"PUT",body:JSON.stringify(t)}),deleteUser:async e=>await s("/protected/admin/users/".concat(e),{method:"DELETE"}),createAnnouncement:async e=>await s("/protected/admin/announcements",{method:"POST",body:JSON.stringify(e)}),getAllAnnouncements:async()=>await s("/protected/admin/announcements"),getAnnouncementById:async e=>await s("/protected/admin/announcements/".concat(e)),getCoursePreTestAdmin:async e=>await s("/protected/admin/courses/".concat(e,"/pretest")),getCoursePostTestAdmin:async e=>await s("/protected/admin/courses/".concat(e,"/posttest")),createQuiz:async e=>await s("/protected/admin/quizzes",{method:"POST",body:JSON.stringify(e)}),updateQuiz:async(e,t)=>await s("/protected/admin/quizzes/".concat(e),{method:"PUT",body:JSON.stringify(t)}),deleteQuiz:async e=>await s("/protected/admin/quizzes/".concat(e),{method:"DELETE"}),getAllQuizzes:async()=>await s("/protected/admin/quizzes"),updateAnnouncement:async(e,t)=>await s("/protected/admin/announcements/".concat(e),{method:"PUT",body:JSON.stringify(t)}),deleteAnnouncement:async e=>await s("/protected/admin/announcements/".concat(e),{method:"DELETE"}),getDashboardStats:async()=>await s("/protected/admin/dashboard/stats"),getTestResults:async()=>await s("/protected/admin/test-results"),getStageLocks:async e=>await s("/protected/admin/courses/".concat(e,"/stage-locks")),updateStageLock:async(e,t)=>await s("/protected/admin/courses/".concat(e,"/stage-locks"),{method:"PUT",body:JSON.stringify(t)})},y={submitSurveyFeedback:async e=>await s("/protected/surveys/feedback",{method:"POST",body:JSON.stringify(e)}),getSurveyFeedback:async e=>await s("/protected/surveys/feedback/".concat(e))},g=y.submitSurveyFeedback,m={syncProgress:async e=>await s("/protected/progress/sync",{method:"POST",body:JSON.stringify(e)}),getCourseProgress:async e=>await s("/protected/courses/".concat(e,"/progress")),updateLessonProgress:async e=>await s("/protected/progress/lesson",{method:"POST",body:JSON.stringify(e)}),getLessonProgress:async(e,t)=>await s("/protected/courses/".concat(e,"/lessons/").concat(t,"/progress")),getUserProgressList:async()=>await s("/protected/progress")},p=m.syncProgress,h=m.getCourseProgress;m.updateLessonProgress,m.getLessonProgress,m.getUserProgressList;let w=n.getUserEnrollments,f=l.getUserCertificates,S=l.requestCertificate,A={auth:o,course:n,submission:c,quiz:i,certificate:l,admin:u,announcement:{getUserAnnouncements:async()=>await s("/protected/announcements")},survey:y,progress:m,utils:d}}}]);